name: Deploy Flask Application to Server

on:
  push:
    branches:
      - main  # Trigger the workflow on push events to the main branch.

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Setup and Deploy Script
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST_2 }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            # Ensure SSH directory exists and has secure permissions
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh

            # Setup SSH key for GitHub if it does not exist
            SSH_KEY_PATH="$HOME/.ssh/id_ed25519"

            if [ ! -f "$SSH_KEY_PATH" ]; then
              # Generate SSH key and output the public key for adding to GitHub
              ssh-keygen -t ed25519 -C "deploy@github" -f $SSH_KEY_PATH -N ""
              echo "SSH key generated. Please manually add the following public key to your GitHub repository under Deploy keys or to your GitHub user account's SSH keys:"
              cat "${SSH_KEY_PATH}.pub"
            else
              # Configure SSH to use the existing key for GitHub operations
              echo "Host github.com\n\tStrictHostKeyChecking no\n\tIdentityFile $SSH_KEY_PATH\n" > ~/.ssh/config
              echo "SSH configuration updated to use existing key."
            fi

            # Install Git if not already installed
            if ! command -v git &>/dev/null; then
              sudo apt-get update
              sudo apt-get install -y git
            fi

            # Setup deployment directory and initialize Git if not done
            DEPLOY_DIR="/var/app"
            if [ ! -d "$DEPLOY_DIR/.git" ]; then
              mkdir -p $DEPLOY_DIR
              cd $DEPLOY_DIR
            fi

            # Pull or clone the repository
            export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
            if [ -d "$DEPLOY_DIR/.git" ]; then
                # Navigate to the directory
                cd "$DEPLOY_DIR" || exit
                
                # Pull updates from the main branch
                if ! git pull origin main; then
                    echo "Failed to pull updates from main branch"
                    exit 1
                fi
            else
                # Clone the repository into the DEPLOY_DIR directory
                if ! git clone git@github.com:Ebenco36/mpvis.git "$DEPLOY_DIR"; then
                    echo "Failed to clone the repository"
                    exit 1
                fi

                # Navigate to the directory
                cd "$DEPLOY_DIR" || exit
                
                # Checkout the main branch
                if ! git checkout main; then
                    echo "Failed to checkout main branch"
                    exit 1
                fi
            fi


      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Deploy using Docker Compose on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_2 }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          timeout: "50m"  # Time in seconds
          script: |
            if ! type docker > /dev/null 2>&1; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi

            # Ensure docker-compose is installed and linked properly
            if [ ! -f "/usr/bin/docker-compose" ]; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            else
              echo "docker-compose is already installed."
            fi

            # Ensure Docker is running
            if ! sudo systemctl is-active --quiet docker; then
              echo "Starting Docker..."
              sudo systemctl restart docker
            else
              echo "Docker is running."
            fi

            # Navigate to the application directory and deploy using docker-compose
            cd /var/app
            docker-compose -f docker-compose.yml up --build -d

      - name: Deploy to Host
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_2 }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd /var/app
            docker stop $(docker ps -q)
            docker container prune -f
            docker image prune -f
            docker volume prune -f
            docker network prune -f
            docker system prune -f
            docker-compose up --build -d
